name: Terraform setup

on: 
  push:
    branches:
      - main
    
jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        ECR_REGISTRY: 185332529335.dkr.ecr.eu-central-1.amazonaws.com
        ECR_REPOSITORY: my-ecr-repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.6'

      - name: Configure AWS credentials
        run: echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV && echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform

  gitleaks_check:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: gitleaks/gitleaks-action@v2
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  checking_java:
    needs: [gitleaks_check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities of java code
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            аrgs: --severity-threshold=high

  build_and_push_image-api:
    needs: [terraform, gitleaks_check, checking_java]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get short SHA
        id: get-sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: apilatest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app/api/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  checking_go:
    needs: [gitleaks_check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities of golang code
        uses: snyk/actions/golang@master
        continue-on-error: true
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            аrgs: --severity-threshold=high

  build_and_push_image_web:
    needs: [terraform, gitleaks_check, checking_go]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get short SHA
        id: get-sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: weblatest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app/web/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

     