name: API Service Build, Push and Deploy

on:

  push:
    branches:
      - 'main'

    paths:
      - 'api/**'
      - '.github/workflows/call-docker-build-api.yaml'

env:
  ECR_REGISTRY: 185332529335.dkr.ecr.eu-central-1.amazonaws.com
  ECR_REPOSITORY: my-ecr-repo

jobs:
   
  gitleaks_check:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: gitleaks/gitleaks-action@v2
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # testing_code:
  #   needs: [gitleaks_check]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Java 17 temurin
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: "temurin"
  #         java-version: "17"

  #     - name: Run Maven clean test jobs
  #       run : mvn -f ./app/api/pom.xml clean test

  checking_java:
    needs: [gitleaks_check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities of java code
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            аrgs: --severity-threshold=high

  checking_go:
    needs: [gitleaks_check, checking_java]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities of golang code
        uses: snyk/actions/golang@master
        continue-on-error: true
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            аrgs: --severity-threshold=high

  build_and_push_image:
    needs: [gitleaks_check, checking_java, checking_go]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get short SHA
        id: get-sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: api-latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app/api/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '185332529335.dkr.ecr.eu-central-1.amazonaws.com/my-ecr-repo:api-latest:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      # - name: Push Docker image
      #   env:
      #     ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
      #     ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      #     IMAGE_TAG: api-latest
      #   run: |
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG